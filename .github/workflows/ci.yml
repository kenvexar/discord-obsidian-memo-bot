name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.5.8"

jobs:
  # Code Quality & Testing
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Create cache key
      run: echo "cache-key=$(echo '${{ hashFiles('pyproject.toml') }}' | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: |
        uv sync --python ${{ matrix.python-version }}

    - name: Code formatting check (Ruff)
      run: |
        uv run ruff format --check src/ tests/

    - name: Linting (Ruff)
      run: |
        uv run ruff check src/ tests/

    - name: Type checking (mypy)
      run: |
        uv run mypy src/
      continue-on-error: ${{ matrix.python-version != env.PYTHON_VERSION }}

    - name: Run tests
      run: |
        uv run pytest tests/ --verbose --cov=src/ --cov-report=xml --cov-report=term-missing
      continue-on-error: ${{ matrix.python-version != env.PYTHON_VERSION }}

    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv sync

    - name: Run safety check
      run: |
        uv pip install safety
        uv pip freeze | uv run safety check --stdin

    - name: Run bandit security linter
      run: |
        uv pip install bandit
        uv run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: discord-obsidian-memo-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -e DISCORD_BOT_TOKEN=dummy \
          -e DISCORD_GUILD_ID=123456789 \
          -e GEMINI_API_KEY=dummy \
          -e OBSIDIAN_VAULT_PATH=/tmp/vault \
          -e ENABLE_MOCK_MODE=true \
          discord-obsidian-memo-bot:test &
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        if docker ps | grep -q test-container; then
          echo "‚úÖ Docker container started successfully"
          docker stop test-container
        else
          echo "‚ùå Docker container failed to start"
          docker logs test-container || true
          exit 1
        fi

  # Deployment to Google Cloud Run (main branch only)
  deploy:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for Google Cloud
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build and push Docker image
      run: |
        IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/discord-obsidian-memo-bot:${{ github.sha }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy discord-obsidian-memo-bot \
          --image ${{ env.IMAGE_TAG }} \
          --region asia-northeast1 \
          --platform managed \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300s \
          --concurrency 5 \
          --set-env-vars="ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }},USE_SECRET_MANAGER=true,OBSIDIAN_VAULT_PATH=/app/vault,PORT=8080"

    - name: Verify deployment
      run: |
        SERVICE_URL=$(gcloud run services describe discord-obsidian-memo-bot \
          --region asia-northeast1 \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # Wait for deployment to stabilize
        sleep 30
        
        # Health check
        if curl -f "$SERVICE_URL/health" --max-time 30; then
          echo "‚úÖ Deployment successful! Health check passed."
        else
          echo "‚ùå Health check failed. Check service logs."
          gcloud logs read "resource.type=cloud_run_revision" --limit=20
          exit 1
        fi

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify deployment result
      if: contains(needs.*.result, 'failure')
      run: |
        echo "üö® Deployment failed! Check the logs for details."
        # Add Discord webhook or other notification logic here

    - name: Notify deployment success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment successful! Service is running on Cloud Run."
        # Add Discord webhook or other notification logic here